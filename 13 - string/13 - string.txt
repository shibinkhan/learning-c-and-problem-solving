Explanation of Important terms & practice problem set [must read]: https://drive.google.com/file/d/1UAYMngrYWhyh38zARPTGhYv5TAmJ79ze/view?usp=sharing



13-1 Introduction to strings

string array এর মাধ্যমে রিপ্রেজেন্ট করা হয়, তবে ভ্যালু {ব্র্যাকেট} এর মধ্যে না রেখে ডিক্লেয়ার করার সময় "ডাবল কোটেশন" এর মধ্যে লিখতে হয়। আর এসাইন করার সময় 'সিঙ্গেল কোটেশন' এর মধ্যে লিখতে হয়।
প্রতিটি string এর শেষে একটা null ক্যারেক্টার থাকে যেটা \0 , এর ASCII ভ্যালু হচ্ছে 0 , এজন্য প্রতিটি string এ একটা অতিরিক্ত ক্যারেক্টার থাকে, যেমন 10 ক্যারেক্টার এর একটা string প্রিন্ট করলে এর সাইজ আসে 11. \0 এর মানে হচ্ছে string টি শেষ, এটি কোনো string এর মাঝে থাকলে এর আগ পর্যন্ত প্রিন্ট হবে। \0 এর পরে কিছু থাকলে তা বাদ দেওয়া হবে।
%s আইডেন্টিফায়ার ইউজ করলে সম্পূর্ণ একটি স্ট্রিং প্রিন্ট করা যায়।



13-2 String Input Output

puts(); ফাংশন দিয়ে string প্রিন্ট দেওয়া হয়।
string ইনপুট নেওয়ার সময় & দেওার দরকার হয় না।

scanf এর বিহাভিয়রঃ
এটি টোকেন বাই টোকেন ইনপুট নেয়। টোকেন বলতে একটা অক্ষর বা একটা শব্দ বা একটা সংখ্যা, অর্থাৎ কোনো (white space) ছাড়া যা লেখা থাকবে তাই হচ্ছে একটা টোকেন, ইনপুট এর মধ্যে কোনো (white space) পেলে scanf মনে করে এখানেই লাইনের শেষ, আর তখন স্ক্যান করা বন্ধ করে দেয়। এক কথায়, (white space) বরাবর ভাগ করে। scanf ততক্ষন পর্যন্ত ইনপুট নেয় যতক্ষন পর্যন্ত (white space) নিউ লাইন না পায়।

(white space) থাকলে scanf এর পরিবর্তে gets(); ফাংশন ইউজ করতে হয়। কারণ gets(); ততক্ষন পর্যন্ত ইনপুট নেয় যতক্ষন পর্যন্ত \n নিউ লাইন না পায়।
gets(); এ যদি size এর থেকে বেশি ভ্যালু ইনপুট দিলে array এর buffer overflow হয়, এর জন্য একটা রান টাইম এরর দেয়। buffer overflow একটু ক্ষতিকর একটা কনসেপ্ট, এর মাধমে সার্ভার হ্যাক করা যায়।
buffer overflow এরাতে fgets(); ইউজ করতে হয়, এটি কোনো এরর না দিয়ে size অনুযায়ী ইনপুট নিবে।
fgets লেখার নিয়মঃ fgets(arrayName, arraySize, stdin);

gets(); বা puts(); এর মধ্যে %s বা & এসব লাগে না, সরাসরি arrayName লিখতে হয়।



13-3 Finding length of a string

string এর উপর লুপ চালিয়ে length বের করা যায়, তবে length এতবেশি লাগে যে এভাবে লুপ চালিয়ে বার বার বের করা অযৌক্তিক,
তাই strlen(arrayName); ইউজ করা হয়, যা #include<string.h> header এর মধ্যে থাকে।



13-4 Copy Strings, strcpy

যখনি কোনো array তে ভ্যালু এসাইন করা হয় এটা নিশ্চিত করতে হবে যে তার শেষে একটা \0 যেনো থাকে।
একটা array থেকে আরেকটা array তে ভ্যালু কপি করার জন্য strcpy(arrayCopyTo, arrayCopyFrom); ইউজ করতে হয়। আর এটা #include<string.h> header এর মধ্যে থাকে। arrayCopyTo এর size এর থেকে যদি arrayCopyFrom এর ভ্যালুর length  বড় হয় তখন strncpy(arrayCopyTo, arrayCopyFrom, howMuchCaracterWeCanCopy);



13-5 Concatenating two strings

একটা string এর সাথে আরেকটি string জোরা লাগানোই হচ্ছে Concatenating string.
strcat(array1Name, array2Name); ফাংশন দিয়ে এটা করা হয়। buffer overflow ঠেকাতে strncat(array1Name, array2Name, howMuchCaracterWeCanConcat);



13-6 Comparing two strings with strcmp

একটা string এর থেকে আরেকটা ছোট কিনা তা চেক করা string জন্য Lexicographical Order ফলো করা হয়। এই Order এ ডিকশনারিতে শব্দ সাজানো হয়। অর্থাৎ আগে A, তারপর B, তারপর C, এরপর শব্দের ২য় অক্ষরগুলোও কম্পেয়ার করে এই Order অনুযায়ি সাজানো হবে, তারপর ৩য় অক্ষর, এভাবে সবগুলো অক্ষর। এভাবে সাজানোই হচ্ছে Lexicographical Order. এখানে কয়েকটা অক্ষর এক্টার পঅর একটা, কয়েকটা শব্দে থাকবে তখন যে কয়টা অক্ষর ম্যাচ করবে তা পাশাপাশি রেখে প্রথম মিচম্যাচ করা অক্ষর কম্পেয়ার করে সাজাতে হবে। যেমন apple, apples (এখানে apple আগে বসবে, apples পরে)



13.5 - 1 Practice

আজকের প্র‍্যাক্টিস প্রবলেম সেটঃ https://docs.google.com/document/d/1zjfwx0bNJT4ZebpUB4fsKn7PJJSUtsgYs9GBkJgLsng/edit?usp=drivesdk
