Explanation of important concepts and Practice problem set: https://drive.google.com/file/d/1RzUg3g_d6zxCWzb1G__77lJZYwBjIL2A/view?usp=sharing



9-1 Variables and Operators Revisited

var লেখার নিয়মঃ
    var-type var-name = value;



9-2 int data type revisited

int
short (এটা ইউজ করলে মেমোরি কম ইউজ হয়)
long
long long (অনেক বড় ভ্যালু হলে এটি ইউজ করতে হয়, আর এটা প্রিন্ট দেওার জন্য %lld specifier ইউজ করতে হয়)
unsigned (এটা নেগেটিভ হতে পারে না, আর এটা প্রিন্ট দেওার জন্য %u specifier ইউজ করতে হয়। এর ভ্যালু -1 দিলে সবচেয়ে বড় ভ্যালুটা পাওয়া যায়)

int এর অপারেটিং রেঞ্জ = -2^31 to 2^31-1 বা -2147483648 to 2147483647
short int এর অপারেটিং রেঞ্জ = -2^15 to 2^15-1 বা -32768 to 32767
long long int এর অপারেটিং রেঞ্জ = -2^63 to 2^63-1 বা -9223372036854775808 to 9223372036854775807
unsigned int এর অপারেটিং রেঞ্জ 0 to 4e9 (4e9 মানে 4 এর পরে 9 টা 0)

printf("%d\n", INT_MAX); দিয়ে int এর সবচেয়ে বড় ভ্যালু পাওয়া যায়।
printf("%d\n", INT_MIN); দিয়ে int এর সবচেয়ে ছোট ভ্যালু পাওয়া যায়।
printf("%d\n", SHRT_MIN); দিয়ে short এর সবচেয়ে ছোট ভ্যালু পাওয়া যায়।
printf("%lld\n", LONG_MIN); দিয়ে long long এর সবচেয়ে ছোট ভ্যালু পাওয়া যায়।

ডাটা টাইপের রেঞ্জ লিমিটেড থাকে। অপারেটিং রেঞ্জের বাহিরের নাম্বার দিলে একটা উলটা পালটা ভেলু আসে, একে বলে ওভারফ্লো।



9-3 float data type revisited

float এর ওয়ার্কিং রেঞ্জ double এর থেকে অনেক কম, আর float এর থেকে double এর আউটপুট অনেক বেশি একুরেট। আউটপুট যদি inf আসে, এর মানে ওভারফ্লো হইছে।

pow(number or varName, power); এই ফাংশন ইউজ করে সহজে কোনো নাম্বারের কিউব বা স্কয়ার বের করা যায়।
sqrt(number or varName); এই ফাংশন ইউজ করে সহজে কোনো নাম্বারের স্কয়ার রুট বের করা যায়।
ceil(number or varName); এই ফাংশন ইউজ করে সহজে কোনো float, double type নাম্বারকে তার ইমিডিয়েট বড় পূর্ণ সঙ্খ্যায় রুপান্তর করা যায়।
floor(number or varName); এই ফাংশন ইউজ করে সহজে কোনো float, double type নাম্বারকে তার ইমিডিয়েট ছোট পূর্ণ সঙ্খ্যায় রুপান্তর করা যায়।

এই ফাংশন গুলো থাকে #include<math.h> হেডার এর মধ্যে।



9-4 char data type revisited

char ch = 'A';
printf("%c", ch);
printf("%d", ch);
এখানে আউটপুট A 65 আসবে, কারণ %c এর জন্য ক্যারেক্টার আর %d এর জন্য এর ইন্টিজার নাম্বার প্রিন্ট হবে।

আবার,
int num = 65;
printf("%c", ch);
printf("%d", ch);
এখানেও আউটপুট A 65 আসবে, কারণ %c এর জন্য ক্যারেক্টার আর %d এর জন্য এর ইন্টিজার নাম্বার প্রিন্ট হবে।

ASCII তে, 00 - 31 & 127 are non printable or control characters
32 - 126 are printable
65 - 90 = A - Z
97 - 122 = a - z
48 - 57 = 0 - 9